import java.io.IOException;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.io.File;
import java.io.IOException;
import java.util.Date;

import org.apache.commons.io.FileUtils;

import com.amazonaws.AmazonServiceException;
import com.amazonaws.auth.AWSCredentials;
import com.amazonaws.auth.DefaultAWSCredentialsProviderChain;
import com.amazonaws.auth.PropertiesCredentials;
import com.amazonaws.services.elasticmapreduce.*;
import com.amazonaws.services.elasticmapreduce.model.AddJobFlowStepsRequest;
import com.amazonaws.services.elasticmapreduce.model.AddJobFlowStepsResult;
import com.amazonaws.services.elasticmapreduce.model.DescribeClusterRequest;
import com.amazonaws.services.elasticmapreduce.model.DescribeClusterResult;
import com.amazonaws.services.elasticmapreduce.model.DescribeJobFlowsRequest;
import com.amazonaws.services.elasticmapreduce.model.DescribeJobFlowsResult;
import com.amazonaws.services.elasticmapreduce.model.HadoopJarStepConfig;
import com.amazonaws.services.elasticmapreduce.model.InstanceGroup;
import com.amazonaws.services.elasticmapreduce.model.InstanceGroupConfig;
import com.amazonaws.services.elasticmapreduce.model.JobFlowExecutionState;
import com.amazonaws.services.elasticmapreduce.model.JobFlowInstancesConfig;
import com.amazonaws.services.elasticmapreduce.model.ListInstanceGroupsRequest;
import com.amazonaws.services.elasticmapreduce.model.ListInstancesRequest;
import com.amazonaws.services.elasticmapreduce.model.MarketType;
import com.amazonaws.services.elasticmapreduce.model.RunJobFlowRequest;
import com.amazonaws.services.elasticmapreduce.model.RunJobFlowResult;
import com.amazonaws.services.elasticmapreduce.model.StepConfig;
import com.amazonaws.services.elasticmapreduce.model.JobFlowDetail;
import com.amazonaws.services.elasticmapreduce.util.StepFactory;
import com.amazonaws.services.s3.model.Region;

public class Main {
	

	public static void main(String[] args) {
		
		//RUN job flow:
		AmazonElasticMapReduce emrClient = new AmazonElasticMapReduceClient(new DefaultAWSCredentialsProviderChain());
		
		emrClient.setRegion(Region.EU_Ireland.toAWSRegion());
		
		StepFactory stepFactory = new StepFactory();
		
		String clusterCreated="";

		//System.out.println("CreateCluster................................:");
		//clusterCreated=launchCluster(emrClient);
		//System.out.println("ClusterCreated: :" + clusterCreated);
        //System.out.println("DescribeCluster................................:");
        //describeCluster(emrClient,"j-YMFWLH64RHS7");
        //System.out.println("DescribeClusterInstances.......................:");
        //describeClusterInstances(emrClient,"j-YMFWLH64RHS7");
        System.out.println("VerifyHealthyRunningSpotInstances..............:");
        verifyHealthyRunningSpotInstances(emrClient,"j-YMFWLH64RHS7");
           
	}
	

	
	//This method verifies if an instance group using Spot instances has less instances running than initially scheduled and 
	//launch a new instance group to replace previous one.
	public static void verifyHealthyRunningSpotInstances(AmazonElasticMapReduce client, String clusterId){
		int difference=0;
		File touchfile=null;
        List<InstanceGroup> instgrouplist = client.listInstanceGroups(new ListInstanceGroupsRequest().withClusterId(clusterId)).getInstanceGroups();
        for (InstanceGroup instgroup: instgrouplist ){
        	System.out.println("checking " + instgroup.getId().toString());
        	difference = getDiffRunningSpotInstances(client, clusterId, instgroup);
        	difference=1; //forcing difference to create a new group.
        	System.out.println("difference " + difference );
        	if (difference>0){
        		touchfile= new File("/tmp/"+ instgroup.getId() + ".txt"); //this file has the name of the instace group. If file already exists, the replacement for that group was already created. No need to launch a new instance group.
        		//if it is a TASK group AND are SPOT instances AND the group was not created already: 
        		if (instgroup.getInstanceGroupType().compareTo("TASK")==0 && instgroup.getMarket().compareTo(MarketType.SPOT.toString())==0 && !fileExist(touchfile)){
            		System.out.println("Let's launch more instances " + "Market: " + instgroup.getMarket());
                    InstanceGroupConfig instanceGroupConfigTask = new InstanceGroupConfig(); //creating a new instanceGroup.
            		//InstanceGroup instanceGroupConfigTask = new InstanceGroup(); //creating a new instanceGroup.
                    instanceGroupConfigTask.setInstanceCount(instgroup.getRequestedInstanceCount());
            		//instanceGroupConfigTask.setRunningInstanceCount(instgroup.getRequestedInstanceCount());
                    instanceGroupConfigTask.setInstanceRole("Task");
            		//instanceGroupConfigTask.setInstanceGroupType("Task");
                    instanceGroupConfigTask.setInstanceType(instgroup.getInstanceGroupType());
                    instanceGroupConfigTask.setMarket("SPOT");
                    Double bidPrice=Double.parseDouble(instgroup.getBidPrice()) + 0.01;
                    instanceGroupConfigTask.setBidPrice( bidPrice.toString() ); //need to increment by 1 cent.
                    try{ //write touch file. 
                    	FileUtils.touch(touchfile);	
                    }catch (Exception e) {
                        System.out.println("error trying to write touch file:" + e.getMessage());
                    }
                    //instgrouplist.a.add(instanceGroupConfigTask);
                    //RequestSpotInstancesRequest requestRequest = new RequestSpotInstancesRequest();
        		}
        		//to evaluate: I cannot create a core group yet if it is lost by bid price. Cluster will terminate if core group is lost.
        	}else
        		System.out.println("no difference");

        } 
	}
	
	public static int getDiffRunningSpotInstances(AmazonElasticMapReduce client, String clusterId, InstanceGroup instgroup)
	{
		int count=0;
	    if (instgroup.getMarket() == MarketType.SPOT.toString()){
	       System.out.println("Market: " + instgroup.getBidPrice());
	       System.out.println("Instances: " + instgroup.getRunningInstanceCount() +" / " +instgroup.getRequestedInstanceCount() );
	       if (instgroup.getRunningInstanceCount() < instgroup.getRequestedInstanceCount()){
	    	   count=(instgroup.getRequestedInstanceCount() - instgroup.getRunningInstanceCount());
	       }
	    } 
		return count;
	}
	


	public static boolean fileExist(File file) {
		System.out.println("checking if file exists: " + file.toString());
		if (file.exists()) {
			System.out.println(file.getName() + " exists");
			return true;
		} else {
			System.out.println(file.getName() + " does not exist");
			return false;
		}
	}

}
